# encoding:utf-8import jsonimport get_confimport MySQLdbfrom dbutils import execute_fetch_sql, execute_commit_sql, execute_sql# 获取所有用户信息# fetchall返回的是元组,为使模版代码不动，这里拼接返回dict# ((u'lf1', u'4297f44b13955235245b2497399d7a93', 35L), (u'lf2', u'4297f44b13955235245b2497399d7a93', 12L), (u'lf3', u'4297f44b13955235245b2497399d7a93', 45L))def get_users():    _columns = ('id', 'username', 'password', 'age')    _sql = 'SELECT id,username,password,age FROM user'    _rt_list, _cnt = execute_fetch_sql(_sql)    rt = []    for _user in _rt_list:        ctx = dict(zip(_columns, _user))        rt.append(ctx)    return rt# 获取单个用户信息def get_user(uid):    _columns = ('id', 'username', 'password', 'age')    args = (uid,)    ctx = None    _sql = 'select id,username,password,age from user where id=%s'    _rt_list, _cnt = execute_fetch_sql(_sql, args)    for _user in _rt_list:        ctx = dict(zip(_columns, _user))    # _user = _cur.fetchone()    # rt = dict(zip(_columns, _user))    return ctx# 校验登录用户名密码# 添加异常 by 2018-07-21def validate_login(username, pwd):    # username= '1" or 1=1;-- '  以下方式可以进行sql注入，获取到所有数据    # _sql = 'select username,password,age from user where username="{username}" and \    # password=md5("{password}")'.format(username=username, password=pwd)    _sql = 'SELECT username,password,age FROM user WHERE username=%s AND password=md5(%s)'    print _sql    args = (username, pwd)    _rt_list, _cnt = execute_fetch_sql(_sql, args)    print _rt_list,_cnt    # _rt_list,_cnt = execute_sql(_sql,args,fetch=True)    # print _rt_list,_cnt    return _cnt != 0# 校验用户添加def validate_user_create(username, pwd, age):    users = get_users()    # 用户名检验    if not username:        return False, u'用户名不能为空'    for user in users:        if user.get('username') == username:            return False, u'用户名己存在'    # 密码检验    if not pwd:        return False, u'密码不能为空'    if len(pwd) < 6:        return False, u'密码长度小于6位'    # 年龄检验    if not age:        return False, u'年龄不能为空'    # type(age) 为 unicode，最好转换为str    if not str(age).isdigit() or int(age) <= 0 or int(age) > 100:        return False, u'请输入0~100之间的数字'    return True, u''# 用户添加函数def user_create(username, pwd, age):    _sql = 'insert into user(username, password, age) values (%s,md5(%s),%s)'    args = (username, pwd, age)    execute_commit_sql(_sql, args)# 校验用户信息修改def validate_user_update(pwd, age):    # 密码检验    if not pwd:        return False, u'密码不能为空'    if len(pwd) < 6:        return False, u'密码长度小于6位'    # 年龄检验    if not age:        return False, u'年龄不能为空'    # type(age) 为 unicode，最好转换为str    if not str(age).isdigit() or int(age) <= 0 or int(age) > 100:        return False, u'请输入0~100之间的数字'    return True, u'修改成功'# 用户修改函数def user_update(uid, pwd, age):    _sql = 'update user set password=md5(%s) , age = %s where id= %s'    args = (pwd, age, uid)    execute_commit_sql(_sql, args)# 用户删除函数# 这里用get_user函数简化def user_delete(uid):    _sql = 'delete from user where id=%s'    args = (uid,)    execute_commit_sql(_sql, args)# def user_delete(username):#     _users = get_users()#     for _user in _users:#         if _user['username'] == username:#             _users.remove(_user)#             print _users#             user_save(_users)#             breakif __name__ == '__main__':    print get_user(1)